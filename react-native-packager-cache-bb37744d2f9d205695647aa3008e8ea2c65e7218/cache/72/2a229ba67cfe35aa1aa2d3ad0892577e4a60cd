Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/Users/andrianost/projects/SwingEssentials/node_modules/react-native-collapsible/Accordion.js';

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _Collapsible = require('./Collapsible');

var _Collapsible2 = _interopRequireDefault(_Collapsible);

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Accordion: {
    displayName: 'Accordion'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/andrianost/projects/SwingEssentials/node_modules/react-native-collapsible/Accordion.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var COLLAPSIBLE_PROPS = Object.keys(_Collapsible2.default.propTypes);
var VIEW_PROPS = Object.keys(_config.ViewPropTypes);

var Accordion = _wrapComponent('Accordion')((_temp = _class = function (_Component) {
  _inherits(Accordion, _Component);

  function Accordion(props) {
    _classCallCheck(this, Accordion);

    var _this = _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).call(this, props));

    _this.state = {
      activeSection: props.activeSection !== undefined ? props.activeSection : props.initiallyActiveSection
    };
    return _this;
  }

  _createClass(Accordion, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.activeSection !== undefined) {
        this.setState({
          activeSection: nextProps.activeSection
        });
      }
    }
  }, {
    key: '_toggleSection',
    value: function _toggleSection(section) {
      var activeSection = this.state.activeSection === section ? false : section;

      if (this.props.activeSection === undefined) {
        this.setState({ activeSection: activeSection });
      }
      if (this.props.onChange) {
        this.props.onChange(activeSection);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var viewProps = {};
      var collapsibleProps = {};
      Object.keys(this.props).forEach(function (key) {
        if (COLLAPSIBLE_PROPS.indexOf(key) !== -1) {
          collapsibleProps[key] = _this2.props[key];
        } else if (VIEW_PROPS.indexOf(key) !== -1) {
          viewProps[key] = _this2.props[key];
        }
      });

      var Touchable = this.props.touchableComponent;

      return _react3.default.createElement(
        _reactNative.View,
        _extends({}, viewProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 80
          }
        }),
        this.props.sections.map(function (section, key) {
          return _react3.default.createElement(
            _reactNative.View,
            { key: key, __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            },
            _react3.default.createElement(
              Touchable,
              _extends({
                onPress: function onPress() {
                  return _this2._toggleSection(key);
                },
                underlayColor: _this2.props.underlayColor
              }, _this2.props.touchableProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 83
                }
              }),
              _this2.props.renderHeader(section, key, _this2.state.activeSection === key)
            ),
            _react3.default.createElement(
              _Collapsible2.default,
              _extends({
                collapsed: _this2.state.activeSection !== key
              }, collapsibleProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 94
                }
              }),
              _this2.props.renderContent(section, key, _this2.state.activeSection === key)
            )
          );
        })
      );
    }
  }]);

  return Accordion;
}(_react2.Component), _class.propTypes = {
  sections: _propTypes2.default.array.isRequired,
  renderHeader: _propTypes2.default.func.isRequired,
  renderContent: _propTypes2.default.func.isRequired,
  onChange: _propTypes2.default.func,
  align: _propTypes2.default.oneOf(['top', 'center', 'bottom']),
  duration: _propTypes2.default.number,
  easing: _propTypes2.default.string,
  initiallyActiveSection: _propTypes2.default.number,
  activeSection: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),
  underlayColor: _propTypes2.default.string,
  touchableComponent: _propTypes2.default.func,
  touchableProps: _propTypes2.default.object
}, _class.defaultProps = {
  underlayColor: 'black',
  touchableComponent: _reactNative.TouchableHighlight
}, _temp));

exports.default = Accordion;