Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/Users/andrianost/projects/SwingEssentials/node_modules/react-native-smart-picker/src/index.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _reactNativeTogglebox = require('react-native-togglebox');

var _reactNativeTogglebox2 = _interopRequireDefault(_reactNativeTogglebox);

var _styles = require('./styles.js');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  TogglePicker: {
    displayName: 'TogglePicker'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/andrianost/projects/SwingEssentials/node_modules/react-native-smart-picker/src/index.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var TogglePicker = _wrapComponent('TogglePicker')(function (_Component) {
  _inherits(TogglePicker, _Component);

  function TogglePicker() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TogglePicker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TogglePicker.__proto__ || Object.getPrototypeOf(TogglePicker)).call.apply(_ref, [this].concat(args))), _this), _this.renderPicker = function () {
      return _react3.default.createElement(
        _reactNative.Picker,
        {
          selectedValue: _this.props.selectedValue,
          onValueChange: _this.props.onValueChange,
          style: _reactNative.Platform.OS === 'ios' ? [_styles2.default.iosPicker, _this.props.iosPickerStyle] : [_styles2.default.androidPicker, _this.props.androidPickerStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 9
          }
        },
        _this.props.children
      );
    }, _this.renderIos = function () {
      return _react3.default.createElement(
        _reactNativeTogglebox2.default,
        { label: _this.props.label, value: _this.props.value, style: _reactNative.StyleSheet.flatten([_styles2.default.toggleBox, _this.props.iosBoxStyle]), __source: {
            fileName: _jsxFileName,
            lineNumber: 19
          }
        },
        _react3.default.createElement(
          _reactNative.View,
          { style: _this.props.iosPickerWrapperStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 20
            }
          },
          _this.renderPicker()
        )
      );
    }, _this.renderAndroid = function () {
      return _react3.default.createElement(
        _reactNative.View,
        { style: [_styles2.default.androidBoxStyle, _this.props.androidBoxStyle], __source: {
            fileName: _jsxFileName,
            lineNumber: 27
          }
        },
        _react3.default.createElement(
          _reactNative.Text,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          },
          _this.props.label
        ),
        _react3.default.createElement(
          _reactNative.View,
          { style: _reactNative.StyleSheet.flatten([_styles2.default.androidPickerWrapper, _this.props.androidPickerWrapper]), __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          },
          _this.renderPicker()
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TogglePicker, [{
    key: 'render',
    value: function render() {
      return _reactNative.Platform.OS === 'ios' ? this.renderIos() : this.renderAndroid();
    }
  }]);

  return TogglePicker;
}(_react2.Component));

TogglePicker.propTypes = {
  androidBoxStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
  androidPickerStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
  androidPickerWrapperStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
  arrowColor: _propTypes2.default.string,
  arrowDownType: _propTypes2.default.string,
  arrowSize: _propTypes2.default.number,
  arrowUpType: _propTypes2.default.string,
  enabled: _propTypes2.default.bool,
  expanded: _propTypes2.default.bool,
  iosBoxStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
  iosPickerStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
  iosPickerWrapperStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
  onValueChange: _propTypes2.default.func.isRequired,
  selectedValue: _propTypes2.default.any.isRequired,
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};

TogglePicker.defaultProps = {
  androidBoxStyle: {},
  androidPickerStyle: {},
  androidPickerWrapperStyle: {},
  androidBoxStyle: {},
  arrowColor: 'rgb(178, 178, 178)',
  arrowDownType: 'keyboard-arrow-down',
  arrowSize: 30,
  arrowUpType: 'keyboard-arrow-up',
  expanded: false,
  iosBoxStyle: {},
  iosPickerStyle: {},
  iosPickerWrapperStyle: {},
  value: ''
};

exports.default = TogglePicker;