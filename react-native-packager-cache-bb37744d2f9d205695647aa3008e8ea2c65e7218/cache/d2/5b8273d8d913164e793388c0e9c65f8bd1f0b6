Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/Users/andrianost/projects/SwingEssentials/node_modules/react-native-youtube/YouTube.ios.js';

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  YouTube: {
    displayName: 'YouTube'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/andrianost/projects/SwingEssentials/node_modules/react-native-youtube/YouTube.ios.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var RCTYouTube = (0, _reactNative.requireNativeComponent)('RCTYouTube', null);

var parsePlayerParams = function parsePlayerParams(props) {
  return {
    videoId: Array.isArray(props.videoIds) ? props.videoIds[0] : props.videoId,
    playlistId: props.playlistId,
    playerVars: {
      playlist: Array.isArray(props.videoIds) ? props.loop && !props.videoIds[1] ? props.videoIds[0] : props.videoIds.slice(1).toString() || undefined : props.loop && props.videoId ? props.videoId : undefined,

      loop: props.loop === true ? 1 : undefined,
      playsinline: props.fullscreen === true ? undefined : 1,
      controls: props.controls,
      fs: props.showFullscreenButton === false ? 0 : undefined,
      showinfo: props.showinfo === false ? 0 : undefined,
      modestbranding: props.modestbranding === true ? 1 : undefined,
      rel: props.rel === false ? 0 : undefined,
      origin: props.origin
    }
  };
};

var YouTube = _wrapComponent('YouTube')((_temp = _class = function (_React$Component) {
  _inherits(YouTube, _React$Component);

  function YouTube(props) {
    _classCallCheck(this, YouTube);

    var _this = _possibleConstructorReturn(this, (YouTube.__proto__ || Object.getPrototypeOf(YouTube)).call(this, props));

    _this._onError = function (event) {
      if (_this.props.onError) _this.props.onError(event.nativeEvent);
    };

    _this._onReady = function (event) {
      _this.forceUpdate();
      _this._isReady = true;
      if (_this.props.onReady) _this.props.onReady(event.nativeEvent);
    };

    _this._onChangeState = function (event) {
      if (_this.props.onChangeState) _this.props.onChangeState(event.nativeEvent);
    };

    _this._onChangeQuality = function (event) {
      if (_this.props.onChangeQuality) {
        _this.props.onChangeQuality(event.nativeEvent);
      }
    };

    _this._onChangeFullscreen = function (event) {
      if (_this.props.onChangeFullscreen) _this.props.onChangeFullscreen(event.nativeEvent);
    };

    _this._onProgress = function (event) {
      if (_this.props.onProgress) _this.props.onProgress(event.nativeEvent);
    };

    _this.state = {
      playerParams: parsePlayerParams(props)
    };
    return _this;
  }

  _createClass(YouTube, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      if (this._isReady) return true;else return false;
    }
  }, {
    key: 'seekTo',
    value: function seekTo(seconds) {
      _reactNative.NativeModules.YouTubeManager.seekTo(_reactNative2.default.findNodeHandle(this), parseInt(seconds, 10));
    }
  }, {
    key: 'nextVideo',
    value: function nextVideo() {
      _reactNative.NativeModules.YouTubeManager.nextVideo(_reactNative2.default.findNodeHandle(this));
    }
  }, {
    key: 'previousVideo',
    value: function previousVideo() {
      _reactNative.NativeModules.YouTubeManager.previousVideo(_reactNative2.default.findNodeHandle(this));
    }
  }, {
    key: 'playVideoAt',
    value: function playVideoAt(index) {
      _reactNative.NativeModules.YouTubeManager.playVideoAt(_reactNative2.default.findNodeHandle(this), parseInt(index, 10));
    }
  }, {
    key: 'videosIndex',
    value: function videosIndex() {
      var _this2 = this;

      if (Array.isArray(this.props.videoIds) && !this.props.videoIds[1] || this.props.videoId) {
        return Promise.resolve(0);
      }

      return new Promise(function (resolve, reject) {
        return _reactNative.NativeModules.YouTubeManager.videosIndex(_reactNative2.default.findNodeHandle(_this2)).then(function (index) {
          return resolve(index);
        }).catch(function (errorMessage) {
          return reject(errorMessage);
        });
      });
    }
  }, {
    key: 'currentTime',
    value: function currentTime() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        return _reactNative.NativeModules.YouTubeManager.currentTime(_reactNative2.default.findNodeHandle(_this3)).then(function (currentTime) {
          return resolve(currentTime);
        }).catch(function (errorMessage) {
          return reject(errorMessage);
        });
      });
    }
  }, {
    key: 'reloadIframe',
    value: function reloadIframe() {
      this.setState({ playerParams: parsePlayerParams(this.props) });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react3.default.createElement(RCTYouTube, {
        style: [{ overflow: 'hidden' }, this.props.style],
        playerParams: this.state.playerParams,
        play: this.props.play,
        videoId: this.props.videoId,
        videoIds: this.props.videoIds,
        playlistId: this.props.playlistId,
        loopProp: this.props.loop,
        onError: this._onError,
        onReady: this._onReady,
        onChangeState: this._onChangeState,
        onChangeQuality: this._onChangeQuality,
        onChangeFullscreen: this._onChangeFullscreen,
        onProgress: this._onProgress,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 173
        }
      });
    }
  }]);

  return YouTube;
}(_react3.default.Component), _class.propTypes = {
  videoId: _propTypes2.default.string,
  videoIds: _propTypes2.default.arrayOf(_propTypes2.default.string),
  playlistId: _propTypes2.default.string,
  play: _propTypes2.default.bool,
  loop: _propTypes2.default.bool,
  fullscreen: _propTypes2.default.bool,
  controls: _propTypes2.default.oneOf([0, 1, 2]),
  showinfo: _propTypes2.default.bool,
  modestbranding: _propTypes2.default.bool,
  showFullscreenButton: _propTypes2.default.bool,
  rel: _propTypes2.default.bool,
  origin: _propTypes2.default.string,
  onError: _propTypes2.default.func,
  onReady: _propTypes2.default.func,
  onChangeState: _propTypes2.default.func,
  onChangeQuality: _propTypes2.default.func,
  onChangeFullscreen: _propTypes2.default.func,
  onProgress: _propTypes2.default.func,
  style: _reactNative.ViewPropTypes && _reactNative.ViewPropTypes.style || _reactNative.View.propTypes.style
}, _temp));

exports.default = YouTube;