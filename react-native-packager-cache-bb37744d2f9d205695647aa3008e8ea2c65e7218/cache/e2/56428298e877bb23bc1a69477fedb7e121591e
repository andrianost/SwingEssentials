Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/Users/andrianost/projects/SwingEssentials/LoginScreen.js';

var _reactNative = require('react-native');

var _reactNativeElements = require('react-native-elements');

var _reactNavigation = require('react-navigation');

var _YourLessonsScreen = require('./YourLessonsScreen');

var _YourLessonsScreen2 = _interopRequireDefault(_YourLessonsScreen);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  LoginScreen: {
    displayName: 'LoginScreen'
  }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/andrianost/projects/SwingEssentials/LoginScreen.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
  };
}

var data = new FormData();

var LoginScreen = _wrapComponent('LoginScreen')((_temp = _class = function (_Component) {
  _inherits(LoginScreen, _Component);

  function LoginScreen(props) {
    _classCallCheck(this, LoginScreen);

    var _this = _possibleConstructorReturn(this, (LoginScreen.__proto__ || Object.getPrototypeOf(LoginScreen)).call(this, props));

    _this.state = { userData: {} };
    return _this;
  }

  _createClass(LoginScreen, [{
    key: 'login',
    value: function login() {
      var _this2 = this;

      fetch('http://www.josephpboyle.com/api/swingessentials.php/login', {
        method: 'POST',
        body: data
      }).then(function (response) {
        if (response.headers.get('content-type').match(/application\/json/)) {
          return response.json();
        }
        return response;
      }).then(function (data) {
        _this2.setState({ userData: data });
      }).catch(function (error) {
        console.warn(error);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var navigate = this.props.navigation.navigate;

      console.log(this.state.userData);
      console.log(this.state.userData.status);

      return _react3.default.createElement(
        _reactNative.View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        },
        _react3.default.createElement(_reactNative.Image, { source: require('./img/SE-Logo-circle.png'), __source: {
            fileName: _jsxFileName,
            lineNumber: 50
          }
        }),
        _react3.default.createElement(
          _reactNativeElements.FormLabel,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 51
            }
          },
          'Username'
        ),
        _react3.default.createElement(_reactNativeElements.FormInput, {
          placeholder: 'Please enter your username',
          onChangeText: function onChangeText(response) {
            return data.append('username', response);
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 52
          }
        }),
        _react3.default.createElement(
          _reactNativeElements.FormLabel,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 56
            }
          },
          'Password'
        ),
        _react3.default.createElement(_reactNativeElements.FormInput, {
          secureTextEntry: true,
          placeholder: 'Please enter your password',
          onChangeText: function onChangeText(response) {
            return data.append('password', response);
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 57
          }
        }),
        _react3.default.createElement(_reactNativeElements.Button, {
          raised: true,
          title: 'Sign In',
          onPress: function onPress() {
            return _this3.props.navigation.navigate('DrawerOpen');
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 62
          }
        })
      );
    }
  }]);

  return LoginScreen;
}(_react2.Component), _class.navigationOptions = {
  title: 'Test'
}, _temp));

exports.default = LoginScreen;


var AppNavigation = (0, _reactNavigation.StackNavigator)({
  YourLessonsScreen: {
    screen: _YourLessonsScreen2.default
  }
});

var styles = _reactNative.StyleSheet.create({
  title: {
    fontSize: 18
  },
  container: {
    alignItems: 'center',
    paddingTop: 20
  },
  loginText: {
    padding: 10,
    height: 40,
    borderColor: 'grey',
    borderWidth: 0.5,
    paddingLeft: 75,
    paddingRight: 75
  }
});

_reactNative.AppRegistry.registerComponent('SwingEssentials', function () {
  return LoginScreen;
});