Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _redux = require('redux');

var _reactNavigation = require('react-navigation');

var _AppNavigator = require('../navigators/AppNavigator.js');

var _actions = require('../actions/actions.js');

var userReducer = function userReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case _actions.LOGIN_SUCCESS:
			return _extends({}, state, {
				username: action.data.personal.username
			});
		default:
			return state;
	}
};
var settingsReducer = function settingsReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	return state;
};
var creditsReducer = function creditsReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	return state;
};
var lessonsReducer = function lessonsReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	return state;
};
var packagesReducer = function packagesReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	return state;
};
var loginReducer = function loginReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case _actions.LOGIN_SUCCESS:
			return _extends({}, state, {
				token: null,
				failCount: 0
			});
		case _actions.LOGIN_ERROR:
			return _extends({}, state, {
				token: null,
				failCount: state.failCount + 1
			});
		default:
			return state;
	}
};

var navigationReducer = function navigationReducer(state, action) {
	var newState = _AppNavigator.AppNavigator.router.getStateForAction(action, state);
	return newState || state;
};

var initialAuthState = { isLoggedIn: false };

var AppReducer = (0, _redux.combineReducers)({
	userData: userReducer,
	settings: settingsReducer,
	credits: creditsReducer,
	lessons: lessonsReducer,
	packages: packagesReducer,
	login: loginReducer,
	nav: navigationReducer
});

exports.default = AppReducer;