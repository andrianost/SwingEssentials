Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _redux = require('redux');

var _reactNavigation = require('react-navigation');

var _AppNavigator = require('../navigators/AppNavigator.js');

var _actions = require('../actions/actions.js');

var userReducer = function userReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case _actions.LOGIN_SUCCESS:
			console.log('user reducer');
			return _extends({}, state, {
				username: action.data.personal.username,
				firstName: action.data.personal.first_name,
				lastName: action.data.personal.last_name,
				email: action.data.personal.email
			});
		case _actions.CREATE_ACCOUNT_SUCCESS:
			console.log('create account success reducer');
			console.log(action.data);
			return _extends({}, state, {
				response: action.data
			});
		case _actions.CREATE_ACCOUNT_FAILURE:
			console.log('create account failure reducer');
			return state;
		default:
			return state;
	}
};
var settingsReducer = function settingsReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case _actions.GET_SETTINGS_SUCCESS:
			console.log('settings reducer');
			return _extends({}, state, {
				avatar: action.data.avatar,
				handedness: action.data.handed,
				camera: {
					delay: action.data.camera.delay,
					duration: action.data.camera.duration,
					overlay: action.data.camera.overlay
				}
			});
		case _actions.GET_SETTINGS_FAILURE:
			return state;
		case _actions.PUT_SETTINGS_SUCCESS:
			return state;
		case _actions.PUT_SETTINGS_FAILURE:
			return state;
		default:
			return state;
	}
};
var creditsReducer = function creditsReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case _actions.REQUEST_CREDITS_SUCCESS:
			console.log('request credits success reducer');
			return _extends({}, state, {
				count: action.data.count,
				unlimited_count: action.data.unlimited_count,
				unlimited_date: action.data.unlimited_date
			});
		case _actions.REQUEST_CREDITS_FAILURE:
			console.log('request credits failure reducer');
			return state;
		default:
			return state;
	}
};
var lessonsReducer = function lessonsReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case _actions.GET_LESSONS_SUCCESS:
			console.log('get lessons success reducer');
			return _extends({}, state, {
				loading: false,
				pending: action.data.pending,
				closed: action.data.closed
			});
		case _actions.GET_LESSONS_FAILURE:
			return state;
		case _actions.SET_REQUEST_ID_SUCCESS:
			console.log('set request id reducer');
			return _extends({}, state, {
				request_id: action.data.request_id,
				request_date: action.data.request_date,
				request_url: action.data.request_url,
				request_notes: action.data.request_notes,
				viewed: action.data.viewed,
				response_notes: action.data.response_notes
			});
		case _actions.UPDATE_VIEWED_STATUS_SUCCESS:
			console.log('update viewed status success reducer');
			return _extends({}, state, {
				viewed: action.data.viewed
			});
		case _actions.UPDATE_VIEWED_STATUS_FAILURE:
			console.log('update viewed status failed reducer');
			return state;
		case _actions.REDEEM_LESSONS_SUCCESS:
			console.log('redeem lessons success reducer');
			return state;
		case _actions.REDEEM_LESSONS_FAILURE:
			console.log('redeem lessons failed reducer');
			return state;
		default:
			return state;
	}
};
var packagesReducer = function packagesReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case _actions.GET_PACKAGES_SUCCESS:
			console.log('get packages success reducer');
			return _extends({}, state, {
				packages: action.data
			});
		case _actions.GET_PACKAGES_FAILURE:
			return state;
		case _actions.ORDER_LESSONS_SUCCESS:
			console.log('order lessons success reducer');

			return _extends({}, state, {
				name: action.data.name,
				description: action.data.description,
				price: action.data.price,
				shortcode: action.data.shortcode
			});
		case _actions.UPDATE_PRICE_SUCCESS:
			console.log('update price success reducer');

			return _extends({}, state, {
				price: action.data.price
			});
		case _actions.DISCOUNT_SUCCESS:
			console.log('discount success reducer');

			return _extends({}, state, {
				type: action.data.type,
				value: action.data.value
			});
		case _actions.DISCOUNT_FAILURE:
			console.log('discount failure reducer');

			return state;
		case _actions.SUBMIT_ORDER_SUCCESS:
			console.log('submit order success reducer');

			return _extends({}, state, {
				response: action.data
			});
		case _actions.SUBMIT_ORDER_FAILURE:
			console.log('submit order failure reducer');

			return state;
		default:
			return state;
	}
};
var loginReducer = function loginReducer() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	var action = arguments[1];

	switch (action.type) {
		case _actions.LOGIN_SUCCESS:
			return _extends({}, state, {
				token: action.data.token,
				failCount: 0
			});
		case _actions.LOGIN_ERROR:
			return _extends({}, state, {
				token: null,
				failCount: state.failCount + 1
			});
		case _actions.RESET_PASSWORD_SUCCESS:
			console.log('reset password success reducer');

			return _extends({}, state, {
				response: action.data
			});
		case _actions.RESET_PASSWORD_FAILURE:
			console.log('reset password failure reducer');

			return state;
		default:
			return state;
	}
};

var navigationReducer = function navigationReducer(state, action) {
	var newState = _AppNavigator.AppNavigator.router.getStateForAction(action, state);
	return newState || state;
};

var initialAuthState = { isLoggedIn: false };

var AppReducer = (0, _redux.combineReducers)({
	userData: userReducer,
	settings: settingsReducer,
	credits: creditsReducer,
	lessons: lessonsReducer,
	packages: packagesReducer,
	login: loginReducer,
	nav: navigationReducer
});

exports.default = AppReducer;