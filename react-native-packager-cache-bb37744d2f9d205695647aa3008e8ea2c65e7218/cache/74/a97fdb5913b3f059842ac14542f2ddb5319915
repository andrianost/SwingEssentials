Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RESET_PASSWORD_FAILURE = exports.RESET_PASSWORD_SUCCESS = exports.REDEEM_LESSONS_FAILURE = exports.REDEEM_LESSONS_SUCCESS = exports.REQUEST_CREDITS_FAILURE = exports.REQUEST_CREDITS_SUCCESS = exports.SUBMIT_ORDER_FAILURE = exports.SUBMIT_ORDER_SUCCESS = exports.UPDATE_PRICE_SUCCESS = exports.UPDATE_VIEWED_STATUS_FAILURE = exports.UPDATE_VIEWED_STATUS_SUCCESS = exports.DISCOUNT_FAILURE = exports.DISCOUNT_SUCCESS = exports.ORDER_LESSONS_SUCCESS = exports.GET_PACKAGES_FAILURE = exports.GET_PACKAGES_SUCCESS = exports.SET_REQUEST_ID_SUCCESS = exports.GET_LESSONS_FAILURE = exports.GET_LESSONS_SUCCESS = exports.PUT_SETTINGS_FAILURE = exports.PUT_SETTINGS_SUCCESS = exports.GET_SETTINGS_FAILURE = exports.GET_SETTINGS_SUCCESS = exports.LOGIN_ERROR = exports.LOGIN_SUCCESS = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.requestLogin = requestLogin;
exports.requestSettings = requestSettings;
exports.userSettingsUpdate = userSettingsUpdate;
exports.requestLessons = requestLessons;
exports.setRequestId = setRequestId;
exports.requestPackages = requestPackages;
exports.orderLessons = orderLessons;
exports.requestDiscount = requestDiscount;
exports.discountSuccess = discountSuccess;
exports.updatePrice = updatePrice;
exports.updateViewedStatus = updateViewedStatus;
exports.submitOrder = submitOrder;
exports.requestCredits = requestCredits;
exports.redeemLessons = redeemLessons;
exports.resetPassword = resetPassword;

var _store = require('../store/store.js');

var _base = require('../utils/base64.js');

var LOGIN_SUCCESS = exports.LOGIN_SUCCESS = 'LOGIN_SUCCESS';
var LOGIN_ERROR = exports.LOGIN_ERROR = 'LOGIN_ERROR';
var GET_SETTINGS_SUCCESS = exports.GET_SETTINGS_SUCCESS = 'GET_SETTINGS_SUCCESS';
var GET_SETTINGS_FAILURE = exports.GET_SETTINGS_FAILURE = 'GET_SETTINGS_FAILURE';
var PUT_SETTINGS_SUCCESS = exports.PUT_SETTINGS_SUCCESS = 'PUT_SETTINGS_SUCCESS';
var PUT_SETTINGS_FAILURE = exports.PUT_SETTINGS_FAILURE = 'PUT_SETTINGS_FAILURE';
var GET_LESSONS_SUCCESS = exports.GET_LESSONS_SUCCESS = 'GET_LESSONS_SUCCESS';
var GET_LESSONS_FAILURE = exports.GET_LESSONS_FAILURE = 'GET_LESSONS_FAILURE';
var SET_REQUEST_ID_SUCCESS = exports.SET_REQUEST_ID_SUCCESS = 'SET_REQUEST_ID_SUCCESS';
var GET_PACKAGES_SUCCESS = exports.GET_PACKAGES_SUCCESS = 'GET_PACKAGES_SUCCESS';
var GET_PACKAGES_FAILURE = exports.GET_PACKAGES_FAILURE = 'GET_PACKAGES_FAILURE';
var ORDER_LESSONS_SUCCESS = exports.ORDER_LESSONS_SUCCESS = 'ORDER_LESSONS_SUCCESS';
var DISCOUNT_SUCCESS = exports.DISCOUNT_SUCCESS = 'DISCOUNT_SUCCESS';
var DISCOUNT_FAILURE = exports.DISCOUNT_FAILURE = 'DISCOUNT_FAILURE';
var UPDATE_VIEWED_STATUS_SUCCESS = exports.UPDATE_VIEWED_STATUS_SUCCESS = 'UPDATE_VIEWED_STATUS_SUCCESS';
var UPDATE_VIEWED_STATUS_FAILURE = exports.UPDATE_VIEWED_STATUS_FAILURE = 'UPDATE_VIEWED_STATUS_FAILURE';
var UPDATE_PRICE_SUCCESS = exports.UPDATE_PRICE_SUCCESS = 'UPDATE_PRICE_SUCCESS';
var SUBMIT_ORDER_SUCCESS = exports.SUBMIT_ORDER_SUCCESS = 'SUBMIT_ORDER_SUCCESS';
var SUBMIT_ORDER_FAILURE = exports.SUBMIT_ORDER_FAILURE = 'SUBMIT_ORDER_FAILURE';
var REQUEST_CREDITS_SUCCESS = exports.REQUEST_CREDITS_SUCCESS = 'REQUEST_CREDITS_SUCCESS';
var REQUEST_CREDITS_FAILURE = exports.REQUEST_CREDITS_FAILURE = 'REQUEST_CREDITS_FAILURE';
var REDEEM_LESSONS_SUCCESS = exports.REDEEM_LESSONS_SUCCESS = 'REDEEM_LESSONS_SUCCESS';
var REDEEM_LESSONS_FAILURE = exports.REDEEM_LESSONS_FAILURE = 'REDEEM_LESSONS_FAILURE';
var RESET_PASSWORD_SUCCESS = exports.RESET_PASSWORD_SUCCESS = 'RESET_PASSWORD_SUCCESS';
var RESET_PASSWORD_FAILURE = exports.RESET_PASSWORD_FAILURE = 'RESET_PASSWORD_FAILURE';

function requestLogin(userCredentials) {
    return function (dispatch) {
        var data = new FormData();
        data.append('username', userCredentials.username);
        data.append('password', userCredentials.password);

        return fetch('http://www.josephpboyle.com/api/swingessentials.php/login', {
            method: 'GET',
            headers: { 'Authorization': 'basic ' + (0, _base.btoa)(userCredentials.username) + '.' + (0, _base.btoa)(userCredentials.password) }
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(loginSuccess(_extends({}, json, { token: response.headers.get('Token') })));
                    }).then(function () {
                        return dispatch(requestSettings(response.headers.get('Token')));
                    }).then(function () {
                        return dispatch(requestLessons(response.headers.get('Token')));
                    }).then(function () {
                        return dispatch(requestPackages());
                    }).then(function () {
                        return dispatch(requestCredits(response.headers.get('Token')));
                    });
                    break;
                default:
                    dispatch(loginFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function loginSuccess(response) {
    console.log('login success');
    return {
        type: LOGIN_SUCCESS,
        data: response
    };
}

function loginFailure(response) {
    console.log('login failure');
    return {
        type: LOGIN_ERROR,
        response: response.status
    };
}

function requestSettings(token) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/swingessentials.php/settings', {
            method: 'GET',
            headers: { 'Authorization': 'bearer ' + token }
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(getSettingsSuccess(json));
                    });
                    break;
                default:
                    dispatch(getSettingsFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function getSettingsSuccess(response) {
    console.log('get settings success');
    return {
        type: GET_SETTINGS_SUCCESS,
        data: response
    };
}

function getSettingsFailure(response) {
    console.log('get settings failure');
    return {
        type: GET_SETTINGS_FAILURE,
        response: response.status
    };
}

function userSettingsUpdate(userSettings) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/swingessentials.php/settings', {
            method: 'PUT',
            headers: {
                'Authorization': 'bearer ' + userSettings.bearerToken,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                'handed': userSettings.handedness,
                'camera_delay': userSettings.delay,
                'camera_duration': userSettings.duration,
                'camera_overlay': userSettings.overlay,
                'avatar': 'test'
            })
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    dispatch(putSettingsSuccess(response));
                    dispatch(requestSettings(userSettings.bearerToken));
                    break;
                default:
                    dispatch(putSettingsFailure(response));
                    dispatch(requestSettings(userSettings.bearerToken));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function putSettingsSuccess(response) {
    console.log('put settings success');
    return {
        type: PUT_SETTINGS_SUCCESS,
        data: response
    };
}

function putSettingsFailure(response) {
    console.log('put settings failure');
    return {
        type: PUT_SETTINGS_FAILURE,
        response: response.status
    };
}

function requestLessons(token) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/myapi.php/lessons', {
            method: 'GET',
            headers: { 'Authorization': 'bearer ' + token }
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(getLessonsSuccess(json));
                    });
                    break;
                default:
                    dispatch(getLessonsFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function getLessonsSuccess(response) {
    console.log('get lessons success');
    return {
        type: GET_LESSONS_SUCCESS,
        data: response
    };
}

function getLessonsFailure(response) {
    console.log('get lessons failure');
    return {
        type: GET_LESSONS_FAILURE,
        response: response.status
    };
}

function setRequestId(response) {
    return function (dispatch) {
        dispatch(setRequestIdSuccess(response));
    };
}

function setRequestIdSuccess(response) {
    console.log('set request id success');
    return {
        type: SET_REQUEST_ID_SUCCESS,
        data: response
    };
}

function requestPackages() {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/myapi.php/packages', {
            method: 'GET'
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(getPackagesSuccess(json));
                    });
                    break;
                default:
                    dispatch(getPackagesFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function getPackagesSuccess(response) {
    console.log('get packages success');

    return {
        type: GET_PACKAGES_SUCCESS,
        data: response
    };
}

function getPackagesFailure(response) {
    console.log('get packages failure');
    console.log(response);
    return {
        type: GET_PACKAGES_FAILURE,
        response: response.status
    };
}

function orderLessons(response) {
    return function (dispatch) {
        dispatch(orderLessonsSuccess(response));
    };
}

function orderLessonsSuccess(response) {
    console.log('order lessons success');
    return {
        type: ORDER_LESSONS_SUCCESS,
        data: response
    };
}

function requestDiscount(discountCode) {
    return function (dispatch) {
        var data = new FormData();
        data.append('discount', discountCode.discount);

        return fetch('http://www.josephpboyle.com/api/swingessentials.php/coupon/' + discountCode.discount, {
            method: 'GET'
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(discountSuccess(json));
                    });
                    break;
                default:
                    dispatch(discountFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function discountSuccess(response) {
    console.log('discount success');
    return {
        type: DISCOUNT_SUCCESS,
        data: response
    };
}

function discountFailure(response) {
    console.log('discount failure');
    return {
        type: DISCOUNT_FAILURE,
        response: response.status
    };
}

function updatePrice(response) {
    return function (dispatch) {
        dispatch(updatePriceSuccess(response));
    };
}

function updatePriceSuccess(response) {
    console.log('update prices success');
    return {
        type: UPDATE_PRICE_SUCCESS,
        data: response
    };
}

function updateViewedStatus(viewedStatus) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/myapi.php/viewed', {
            method: 'PUT',
            headers: {
                'Authorization': 'bearer ' + viewedStatus.bearerToken
            },
            body: JSON.stringify({
                'id': parseInt(viewedStatus.request_id)
            })
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    dispatch(updateViewedStatusSuccess(response));
                    dispatch(requestLessons(viewedStatus.bearerToken));
                    break;
                default:
                    dispatch(updateViewedStatusFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function updateViewedStatusSuccess(response) {
    console.log('update viewed status success');
    return {
        type: UPDATE_VIEWED_STATUS_SUCCESS,
        data: response
    };
}

function updateViewedStatusFailure(response) {
    console.log('update viewed status failure');
    return {
        type: UPDATE_VIEWED_STATUS_FAILURE,
        response: response.status
    };
}

function submitOrder(data) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/myapi.php/purchase/' + data.shortcode, {
            method: 'POST',
            headers: {
                'Authorization': 'bearer ' + data.bearerToken
            }
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    dispatch(submitOrderSuccess(response));
                    break;
                default:
                    dispatch(submitOrderFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function submitOrderSuccess(response) {
    console.log('submit order success');
    return {
        type: SUBMIT_ORDER_SUCCESS,
        data: response
    };
}

function submitOrderFailure(response) {
    console.log('submit order failure');
    return {
        type: SUBMIT_ORDER_FAILURE,
        response: response.status
    };
}

function requestCredits(token) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/myapi.php/credits', {
            method: 'GET',
            headers: { 'Authorization': 'Bearer ' + token }
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(requestCreditsSuccess(json));
                    });
                    break;
                default:
                    dispatch(requestCreditsFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function requestCreditsSuccess(response) {
    console.log('request credits success success');
    console.log(response);
    return {
        type: REQUEST_CREDITS_SUCCESS,
        data: response
    };
}

function requestCreditsFailure(response) {
    console.log('request credits failure');
    return {
        type: REQUEST_CREDITS_FAILURE,
        response: response.status
    };
}

function redeemLessons(token) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/myapi.php/redeem', {
            method: 'POST',
            headers: { 'Authorization': 'Bearer ' + token.bearerToken }
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(redeemLessonsSuccess(json));
                    });
                    break;
                default:
                    dispatch(redeemLessonsFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function redeemLessonsSuccess(response) {
    console.log('redeem lessons success');

    return {
        type: REDEEM_LESSONS_SUCCESS,
        data: response
    };
}

function redeemLessonsFailure(response) {
    console.log('redeem lessons failure');
    console.log(response);
    return {
        type: REDEEM_LESSONS_FAILURE,
        response: response.status
    };
}

function resetPassword(userEmail) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/myapi.php/reset', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                'email': userEmail.userEmail
            })
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    dispatch(resetPasswordSuccess(response));
                    break;
                default:
                    dispatch(resetPasswordFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function resetPasswordSuccess(response) {
    console.log('reset password success');
    console.log(response);
    return {
        type: RESET_PASSWORD_SUCCESS,
        data: response
    };
}

function resetPasswordFailure(response) {
    console.log('reset password failure');
    console.log(response);
    return {
        type: RESET_PASSWORD_FAILURE,
        response: response.status
    };
}