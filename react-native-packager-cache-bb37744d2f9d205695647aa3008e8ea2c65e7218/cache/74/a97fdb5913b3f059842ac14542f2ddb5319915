Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PUT_SETTINGS_FAILURE = exports.PUT_SETTINGS_SUCCESS = exports.GET_SETTINGS_FAILURE = exports.GET_SETTINGS_SUCCESS = exports.LOGIN_ERROR = exports.LOGIN_SUCCESS = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.requestLogin = requestLogin;
exports.requestSettings = requestSettings;
exports.userSettingsUpdate = userSettingsUpdate;

var _store = require('../store/store.js');

var _base = require('../utils/base64.js');

var LOGIN_SUCCESS = exports.LOGIN_SUCCESS = 'LOGIN_SUCCESS';
var LOGIN_ERROR = exports.LOGIN_ERROR = 'LOGIN_ERROR';
var GET_SETTINGS_SUCCESS = exports.GET_SETTINGS_SUCCESS = 'GET_SETTINGS_SUCCESS';
var GET_SETTINGS_FAILURE = exports.GET_SETTINGS_FAILURE = 'GET_SETTINGS_FAILURE';
var PUT_SETTINGS_SUCCESS = exports.PUT_SETTINGS_SUCCESS = 'PUT_SETTINGS_SUCCESS';
var PUT_SETTINGS_FAILURE = exports.PUT_SETTINGS_FAILURE = 'PUT_SETTINGS_FAILURE';

function requestLogin(userCredentials) {
    return function (dispatch) {
        var data = new FormData();
        data.append('username', userCredentials.username);
        data.append('password', userCredentials.password);

        return fetch('http://www.josephpboyle.com/api/swingessentials.php/login', {
            method: 'GET',
            headers: { 'Authorization': 'basic ' + (0, _base.btoa)(userCredentials.username) + '.' + (0, _base.btoa)(userCredentials.password) }
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(loginSuccess(_extends({}, json, { token: response.headers.get('Token') })));
                    }).then(function () {
                        return dispatch(requestSettings(response.headers.get('Token')));
                    });
                    break;
                default:
                    dispatch(loginFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function loginSuccess(response) {
    return {
        type: LOGIN_SUCCESS,
        data: response
    };
}

function loginFailure(response) {
    return {
        type: LOGIN_ERROR,
        response: response.status
    };
}

function requestSettings(token) {
    return function (dispatch) {
        return fetch('http://www.josephpboyle.com/api/swingessentials.php/settings', {
            method: 'GET',
            headers: { 'Authorization': 'bearer ' + token }
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    response.json().then(function (json) {
                        return dispatch(getSettingsSuccess(json));
                    });
                    break;
                default:
                    dispatch(getSettingsFailure(response));
                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function getSettingsSuccess(response) {
    return {
        type: GET_SETTINGS_SUCCESS,
        data: response
    };
}

function getSettingsFailure(response) {
    return {
        type: GET_SETTINGS_FAILURE,
        response: response.status
    };
}

function userSettingsUpdate(userSettings) {
    return function (dispatch) {
        console.log(userSettings.handednessSelection);
        console.log(userSettings.bearerToken);
        return fetch('http://www.josephpboyle.com/api/myapi.php/settings', {
            method: 'PUT',
            headers: {
                'Authorization': 'bearer ' + userSettings.bearerToken,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                'handed': userSettings.handednessSelection,
                'camera_delay': 5,
                'camera_duration': 5,
                'camera_overlay': true,
                'avatar': 'test'
            })
        }).then(function (response) {
            switch (response.status) {
                case 200:
                    console.log(response.status);
                    dispatch(putSettingsSuccess());

                    break;
                default:
                    console.log(response.status);
                    dispatch(putSettingsFailure(response));

                    break;
            }
        }).catch(function (error) {
            return console.error(error);
        });
    };
}

function putSettingsSuccess(response) {
    return {
        type: PUT_SETTINGS_SUCCESS,
        data: response
    };
}

function putSettingsFailure(response) {
    return {
        type: PUT_SETTINGS_FAILURE,
        response: response.status
    };
}