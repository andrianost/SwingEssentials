Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/Users/andrianost/projects/SwingEssentials/node_modules/react-native-collapsible/Collapsible.js';

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Collapsible: {
    displayName: 'Collapsible'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/andrianost/projects/SwingEssentials/node_modules/react-native-collapsible/Collapsible.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ANIMATED_EASING_PREFIXES = ['easeInOut', 'easeOut', 'easeIn'];

var Collapsible = _wrapComponent('Collapsible')((_temp = _class = function (_Component) {
  _inherits(Collapsible, _Component);

  function Collapsible(props) {
    _classCallCheck(this, Collapsible);

    var _this = _possibleConstructorReturn(this, (Collapsible.__proto__ || Object.getPrototypeOf(Collapsible)).call(this, props));

    _this.contentHandle = null;

    _this._handleRef = function (ref) {
      _this.contentHandle = ref;
    };

    _this._handleLayoutChange = function (event) {
      var contentHeight = event.nativeEvent.layout.height;
      if (_this.state.animating || _this.props.collapsed || _this.state.measuring || _this.state.contentHeight === contentHeight) {
        return;
      }
      _this.state.height.setValue(contentHeight);
      _this.setState({ contentHeight: contentHeight });
    };

    _this.state = {
      measuring: false,
      measured: false,
      height: new _reactNative.Animated.Value(props.collapsedHeight),
      contentHeight: 0,
      animating: false
    };
    return _this;
  }

  _createClass(Collapsible, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.collapsed !== this.props.collapsed) {
        this._toggleCollapsed(nextProps.collapsed);
      } else if (nextProps.collapsed && nextProps.collapsedHeight !== this.props.collapsedHeight) {
        this.state.height.setValue(nextProps.collapsedHeight);
      }
    }
  }, {
    key: '_measureContent',
    value: function _measureContent(callback) {
      var _this2 = this;

      this.setState({
        measuring: true
      }, function () {
        requestAnimationFrame(function () {
          if (!_this2.contentHandle) {
            _this2.setState({
              measuring: false
            }, function () {
              return callback(_this2.props.collapsedHeight);
            });
          } else {
            _this2.contentHandle.getNode().measure(function (x, y, width, height) {
              _this2.setState({
                measuring: false,
                measured: true,
                contentHeight: height
              }, function () {
                return callback(height);
              });
            });
          }
        });
      });
    }
  }, {
    key: '_toggleCollapsed',
    value: function _toggleCollapsed(collapsed) {
      var _this3 = this;

      if (collapsed) {
        this._transitionToHeight(this.props.collapsedHeight);
      } else if (!this.contentHandle) {
        if (this.state.measured) {
          this._transitionToHeight(this.state.contentHeight);
        }
        return;
      } else {
        this._measureContent(function (contentHeight) {
          _this3._transitionToHeight(contentHeight);
        });
      }
    }
  }, {
    key: '_transitionToHeight',
    value: function _transitionToHeight(height) {
      var _this4 = this;

      var duration = this.props.duration;

      var easing = this.props.easing;
      if (typeof easing === 'string') {
        var prefix = void 0;
        var found = false;
        for (var i = 0; i < ANIMATED_EASING_PREFIXES.length; i++) {
          prefix = ANIMATED_EASING_PREFIXES[i];
          if (easing.substr(0, prefix.length) === prefix) {
            easing = easing.substr(prefix.length, 1).toLowerCase() + easing.substr(prefix.length + 1);
            prefix = prefix.substr(4, 1).toLowerCase() + prefix.substr(5);
            easing = _reactNative.Easing[prefix](_reactNative.Easing[easing || 'ease']);
            found = true;
            break;
          }
        }
        if (!found) {
          easing = _reactNative.Easing[easing];
        }
        if (!easing) {
          throw new Error('Invalid easing type "' + this.props.easing + '"');
        }
      }

      if (this._animation) {
        this._animation.stop();
      }
      this.setState({ animating: true });
      this._animation = _reactNative.Animated.timing(this.state.height, {
        toValue: height,
        duration: duration,
        easing: easing
      }).start(function () {
        return _this4.setState({ animating: false });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var collapsed = this.props.collapsed;
      var _state = this.state,
          height = _state.height,
          contentHeight = _state.contentHeight,
          measuring = _state.measuring,
          measured = _state.measured;

      var hasKnownHeight = !measuring && (measured || collapsed);
      var style = hasKnownHeight && {
        overflow: 'hidden',
        height: height
      };
      var contentStyle = {};
      if (measuring) {
        contentStyle.position = 'absolute';
        contentStyle.opacity = 0;
      } else if (this.props.align === 'center') {
        contentStyle.transform = [{
          translateY: height.interpolate({
            inputRange: [0, contentHeight],
            outputRange: [contentHeight / -2, 0]
          })
        }];
      } else if (this.props.align === 'bottom') {
        contentStyle.transform = [{
          translateY: height.interpolate({
            inputRange: [0, contentHeight],
            outputRange: [-contentHeight, 0]
          })
        }];
      }
      return _react3.default.createElement(
        _reactNative.Animated.View,
        { style: style, pointerEvents: collapsed ? 'none' : 'auto', __source: {
            fileName: _jsxFileName,
            lineNumber: 184
          }
        },
        _react3.default.createElement(
          _reactNative.Animated.View,
          {
            ref: this._handleRef,
            style: [this.props.style, contentStyle],
            onLayout: this.state.animating ? undefined : this._handleLayoutChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 185
            }
          },
          this.props.children
        )
      );
    }
  }]);

  return Collapsible;
}(_react2.Component), _class.propTypes = {
  align: _propTypes2.default.oneOf(['top', 'center', 'bottom']),
  collapsed: _propTypes2.default.bool,
  collapsedHeight: _propTypes2.default.number,
  duration: _propTypes2.default.number,
  easing: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  style: _config.ViewPropTypes.style,
  children: _propTypes2.default.node
}, _class.defaultProps = {
  align: 'top',
  collapsed: true,
  collapsedHeight: 0,
  duration: 300,
  easing: 'easeOutCubic'
}, _temp));

exports.default = Collapsible;